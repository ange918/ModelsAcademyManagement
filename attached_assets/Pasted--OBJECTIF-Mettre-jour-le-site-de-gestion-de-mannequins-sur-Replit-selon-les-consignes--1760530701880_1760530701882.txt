# üîß OBJECTIF :
# Mettre √† jour le site de gestion de mannequins sur Replit
# selon les consignes suivantes :

##############################################################
# üóÇÔ∏è STRUCTURE DES DOSSIERS
##############################################################

# 1Ô∏è‚É£ V√©rifie le dossier images/
#    Chaque mannequin doit avoir son propre dossier :
#    images/Nom_du_mannequin/
#    Et √† l‚Äôint√©rieur, trois sous-dossiers :
#       - portfolio/
#       - defile/
#       - shooting/
#    Si un sous-dossier n‚Äôexiste pas, le cr√©er vide.

# 2Ô∏è‚É£ Ajouter les mannequins manquants :
#    - VODOUNON J√©diel ‚Üí Taille 1.76
#    - Tossou Rafiou honel ‚Üí Taille 1.87
#    leurs dossier Sont d√©j√† existants 

##############################################################
# üìÑ FICHIER data/models.json
##############################################################

# 3Ô∏è‚É£ S‚Äôassurer que chaque mannequin est pr√©sent dans models.json :
#    - avec nom, taille, description, caract√©ristiques, mensurations,
#      et chemins vers les trois cat√©gories d‚Äôimages :
#      portfolio, defile, shooting.
#    Exemple :
#    {
#      "name": "Lucia Padanou",
#      "height": "1.80m",
#      "city": "Cotonou",
#      "experience": "3 ans",
#      "images": {
#        "portfolio": ["images/Lucia Padanou/portfolio/1.jpg", ...],
#        "defile": ["images/Lucia Padanou/defile/1.jpg", ...],
#        "shooting": ["images/Lucia Padanou/shooting/1.jpg", ...]
#      }
#    }

##############################################################
# üß± PAGE mannequin.html
##############################################################

# 4Ô∏è‚É£ Supprimer le bouton noir ‚Äú‚Üê Retour‚Äù.
#    Garder uniquement le lien texte ‚Äú‚Üê Retour aux Mannequins‚Äù.

# 5Ô∏è‚É£ Ajouter au-dessus de la galerie trois onglets :
#    - Portfolio
#    - Fashion Show
#    - Shooting
#    Ces onglets permettent d‚Äôafficher uniquement les photos du dossier correspondant.

# Exemple de structure HTML :
# <div class="tabs flex justify-center gap-4 mt-8">
#   <button class="tab active" data-category="portfolio">Portfolio</button>
#   <button class="tab" data-category="defile">Fashion Show</button>
#   <button class="tab" data-category="shooting">Shooting</button>
# </div>

# <div id="gallery" class="grid grid-cols-2 md:grid-cols-3 gap-4 mt-6"></div>

# Le JS √©coute les clics sur les boutons et charge les bonnes images
# depuis models.json selon la cat√©gorie choisie.

##############################################################
# ü™û STYLE ET POLICES
##############################################################

# 6Ô∏è‚É£ Charger les polices depuis assets/fonts/
#    et les appliquer globalement :
#    - Titres : police fine (font-weight: 300)
#    - Paragraphes : police l√©g√®re (font-weight: 200)
#    Ajouter au fichier CSS principal :
#
# @font-face {
#   font-family: 'CustomFont';
#   src: url('assets/fonts/CustomFont.woff2') format('woff2');
#   font-weight: 200;
#   font-style: normal;
# }
#
# body {
#   font-family: 'CustomFont', sans-serif;
#   font-weight: 200;
# }

##############################################################
# üß© ICONES BOXICONS
##############################################################

# 7Ô∏è‚É£ Ajouter dans le <head> :
# <link href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css" rel="stylesheet" />
#
# Utiliser les ic√¥nes pour les caract√©ristiques :
#   Taille ‚Üí <i class='bx bx-ruler'></i>
#   Cheveux ‚Üí <i class='bx bx-brush'></i>
#   Yeux ‚Üí <i class='bx bx-show'></i>
#   Ville ‚Üí <i class='bx bx-map'></i>
#   Exp√©rience ‚Üí <i class='bx bx-time'></i>

##############################################################
# üß† JAVASCRIPT (mannequin.js)
##############################################################

# 8Ô∏è‚É£ Charger les donn√©es de data/models.json une seule fois pour √©viter le clignotement.
#    Ex√©cuter le script dans un bloc :
#
# document.addEventListener("DOMContentLoaded", async () => {
#   const res = await fetch("data/models.json");
#   const data = await res.json();
#   // afficher les infos du mannequin et sa galerie ici
# });
#
# 9Ô∏è‚É£ Ajouter une fonction qui change la galerie selon l‚Äôonglet s√©lectionn√© :
#
# function showCategory(category) {
#   const images = model.images[category];
#   gallery.innerHTML = images.map(src => `<img src="${src}" class="rounded-lg shadow-md" />`).join("");
# }
#
# document.querySelectorAll(".tab").forEach(btn => {
#   btn.addEventListener("click", e => {
#     document.querySelector(".tab.active").classList.remove("active");
#     e.target.classList.add("active");
#     showCategory(e.target.dataset.category);
#   });
# });

##############################################################
# üöÄ OPTIMISATION
##############################################################

# 10Ô∏è‚É£ Corriger le clignotement :
#     - Supprimer tout rechargement automatique.
#     - Charger les donn√©es et ins√©rer le HTML dynamiquement une seule fois.
#     - Utiliser transition ou fade-in CSS si n√©cessaire.

##############################################################
# ‚úÖ FIN DU PROMPT
##############################################################

# Une fois ex√©cut√©, ton site affichera :
# - Des galeries tri√©es par cat√©gorie (Portfolio / Fashion Show / Shooting)
# - Des polices fines et harmonieuses
# - Des ic√¥nes Boxicons pour chaque information
# - Aucune page clignotante
# - Tous les dossiers mannequins bien structur√©s
# - Les nouveaux mannequins ajout√©s automatiquement